import pandas as pd
import re
import nltk
from nltk.corpus import stopwords

# Load the dataset
df = pd.read_csv('cv_data.csv')

# Sample structure: ['cv_text', 'trait_openness', 'trait_conscientiousness', ...]

# Text cleaning function
def clean_text(text):
    text = re.sub(r'\s+', ' ', text)  # Remove extra spaces
    text = re.sub(r'\d+', '', text)  # Remove numbers
    text = re.sub(r'[^\w\s]', '', text)  # Remove punctuation
    text = text.lower()  # Convert to lowercase
    return text

# Apply text cleaning
df['cleaned_cv_text'] = df['cv_text'].apply(clean_text)

# Download stopwords
nltk.download('stopwords')
stop_words = set(stopwords.words('english'))

# Remove stopwords
df['cleaned_cv_text'] = df['cleaned_cv_text'].apply(lambda x: ' '.join([word for word in x.split() if word not in stop_words]))

print(df.head())

from sklearn.feature_extraction.text import TfidfVectorizer

# Initialize TF-IDF Vectorizer
tfidf = TfidfVectorizer(max_features=5000)

# Fit and transform the text data
X = tfidf.fit_transform(df['cleaned_cv_text'])

# Extract target variables (personality traits)
y_openness = df['trait_openness']
y_conscientiousness = df['trait_conscientiousness']
# Add other traits as needed

print(X.shape)
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

# Split the data into training and testing sets
X_train, X_test, y_train_openness, y_test_openness = train_test_split(X, y_openness, test_size=0.2, random_state=42)

# Initialize and train the model
model_openness = LogisticRegression()
model_openness.fit(X_train, y_train_openness)

# Repeat the process for other traits
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# Predict on the test set
y_pred_openness = model_openness.predict(X_test)

# Calculate evaluation metrics
accuracy = accuracy_score(y_test_openness, y_pred_openness)
precision = precision_score(y_test_openness, y_pred_openness, average='weighted')
recall = recall_score(y_test_openness, y_pred_openness, average='weighted')
f1 = f1_score(y_test_openness, y_pred_openness, average='weighted')

print(f'Accuracy: {accuracy}')
print(f'Precision: {precision}')
print(f'Recall: {recall}')
print(f'F1 Score: {f1}')
# Example function to predict personality traits from a new CV
def predict_personality(cv_text):
    cleaned_text = clean_text(cv_text)
    features = tfidf.transform([cleaned_text])
    openness = model_openness.predict(features)
    # Add predictions for other traits
    return {
        'openness': openness[0],
        # Add other traits
    }

# Example usage
new_cv = "Your new CV text here..."
prediction = predict_personality(new_cv)
print(prediction)
from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/predict', methods=['POST'])
def predict():
    cv_text = request.json.get('cv_text')
    if not cv_text:
        return jsonify({'error': 'No CV text provided'}), 400
    prediction = predict_personality(cv_text)
    return jsonify(prediction)

if __name__ == '__main__':
    app.run(debug=True)
